import lit
from shutil import which
from os import environ, path

config.name = 'lit'
config.test_format = lit.formats.ShTest(execute_external=True)
config.suffixes = ['.test']
config.test_source_root = os.path.dirname(__file__)

def get_executable(name, executables):
  option = f"{name.upper()}_EXECUTABLE"
  user_defined = lit_config.params.get(option)
  if user_defined:
    exec_path = user_defined
  try:
    exec_path = next(exec for exec in \
                     map(which, executables) if exec)
  except StopIteration:
    tried = " (tried " + ", ".join(executables) + ")" if executables else ""
    raise RuntimeError(f"Binary {name} not found{tried}. Please set {option}.")
  print(f"Using {name}: \"{exec_path}\"")
  return exec_path

PYTHON = get_executable("python", ("python", "python3"))
FILECHECK = get_executable("filecheck", ("filecheck", "FileCheck"))
OUTPUT = lit_config.params.get("TEST_OUTPUT", os.path.join(config.test_source_root, "_test"))
print(f"Using test output: {OUTPUT}") 

config.test_exec_root = OUTPUT 

bash_argparse_path = os.path.join(config.test_source_root, "..", "bash-argparse.py")
if not os.path.exists(bash_argparse_path):
  raise RuntimeError(f"Couldn't find bash-argparse.py ('{bash_argparse_path}' does not exist)")

config.substitutions.append(("%{FileCheck}", "filecheck"))
config.substitutions.append(("%{bash-argparse}", "%{python} " + bash_argparse_path))
config.substitutions.append(("%{python}", PYTHON))
