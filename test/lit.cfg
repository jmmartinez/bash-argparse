import lit
from shutil import which
from os import environ, path
from subprocess import run as subprocess_run
from platform import system

config.name = 'lit'
config.test_format = lit.formats.ShTest(execute_external=False)
config.suffixes = ['.test', '.sh']
config.test_source_root = os.path.dirname(__file__)

def get_executable(name, executables):
  option = f"{name.upper()}_EXECUTABLE"
  user_defined = lit_config.params.get(option)
  if user_defined:
    exec_path = user_defined
  else:
    try:
      exec_path = next(exec for exec in \
                      map(which, executables) if exec)
    except StopIteration:
      tried = " (tried " + ", ".join(executables) + ")" if executables else ""
      raise RuntimeError(f"Binary {name} not found{tried}. Please set {option}.")
  print(f"Using {name}: \"{exec_path}\"")
  return exec_path

PYTHON = get_executable("python", ("python", "python3"))
FILECHECK = get_executable("filecheck", ("filecheck", "FileCheck"))
OUTPUT = lit_config.params.get("TEST_OUTPUT", os.path.join(config.test_source_root, "_test"))
print(f"Using test output: {OUTPUT}") 

true_set = ("y", "yes", "t", "true", "on", "1")
USE_INSTALLED = lit_config.params.get("USE_INSTALLED", "").lower() in true_set
print(f"Use installed: {USE_INSTALLED}")

config.test_exec_root = OUTPUT 

bash_argparse_path = os.path.abspath(os.path.join(config.test_source_root, "..", "src", "bash-argparse", "__main__.py"))
if not os.path.exists(bash_argparse_path):
  raise RuntimeError(f"Couldn't find bash-argparse.py ('{bash_argparse_path}' does not exist)")

utils = os.path.abspath(os.path.join(config.test_source_root, "utils"))

has_boolean_optional_action = subprocess_run([PYTHON, "-c", "from argparse import BooleanOptionalAction"], timeout=1, stderr=None).returncode == 0
with_boolean_optional_action = "" if has_boolean_optional_action else "true || "

is_windows = system() == "Windows"
shell = "bash" if not is_windows else "batch"

config.available_features.add(system().lower())
config.substitutions += (
  ("%{FileCheck}", FILECHECK),
  ("%{bash-argparse-for-this-shell}", "%{bash-argparse} --format %{shell}"),
  ("%{bash-argparse}", "%{python} -m bash-argparse" if USE_INSTALLED else "%{python} %{bash-argparse-script}"),
  ("%{not}", "%{python} %{utils}/not.py"),
  ("%{with-boolean-optional-action}", with_boolean_optional_action),
  ("%{bash-argparse-script}", bash_argparse_path),
  ("%{shell}", shell),
  ("%{utils}", utils),
  ("%{python}", PYTHON),
)
